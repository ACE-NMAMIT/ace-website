---
import Layout from '@layouts/Layout.astro';
import { faculty } from '@lib/constants';

const teamMembers = {
  2023: [
    { name: 'James Henry', position: 'HOD', image: '/images/sample.png' },
    { name: 'James Henry', position: 'HOD', image: '/images/sample.png' },
    { name: 'John Doe', position: 'Assistant Professor', image: '/images/sample.png' },
    { name: 'Srinivasa', position: 'Professor II', image: '/images/sample.png' },
    { name: 'Mykel Smith', position: 'Professor', image: '/images/sample.png' },
    { name: 'Angel Smith', position: 'Professor II', image: '/images/sample.png' },
  ],
  2024: [
    { name: 'James Henry', position: 'HOD', image: '/images/sample.png' },
    { name: 'James Henry', position: 'HOD', image: '/images/sample.png' },
    { name: 'John Doe', position: 'Assistant Professor', image: '/images/sample.png' },
    { name: 'Srinivasa', position: 'Professor II', image: '/images/sample.png' },
  ],
  faculty,
};
---

<Layout >
  <section class="content-container tabs mt-28">
    {Object.keys(teamMembers).map((tabName)=>{
      const displayString = tabName=="faculty"?"faculty":`${tabName}-${Number(tabName)+1}`
      return (
      <input class="input" name="tabs" type="radio" id={`tab-${tabName}`} value={tabName} checked={tabName=="faculty"}/>
      <label class="label" for={`tab-${tabName}`}>{displayString}</label>
    )
    })}


    <div class="panel-container w-full">
      {Object.entries(teamMembers).map(([tabName,members])=>( 
        <div class="panel w-full flex flex-wrap justify-center gap-4" data-tabname={tabName}>
          {
            members.map((member) => (
              <div class="card">
                <div class="imgBx">
                  <img src={member.image} alt={member.name} />
                </div>
                <div class="content">
                  <div class="contentBx">
                    <h3>{member.name}</h3>
                    <span>{member.position}</span>
                  </div>
                </div>
              </div>
            ))
          }   
        </div>
      ))}
    </div>
  </section>
</Layout>

<style>
  input[name='tabs'] {
    display: none;
  }
  .hide-panel {
    display: none;
  }
  .show-panel {
    display: block;
  }
  .card_Container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    margin: 40px 0;
    gap: 50px;
  }

  @keyframes fadeInUp {
    0% {
      opacity: 0;
      transform: translateY(50px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .card {
    position: relative;
    width: 300px;
    height: 400px;
    margin: 20px;
    overflow: hidden;
    border-radius: 15px;
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(
      45deg,
      #64cfe243 40%,
      rgba(6, 100, 252, 0.414),
      rgba(6, 100, 252, 0.317) 60%,
      transparent
    );
    opacity: 0;
    background-size: 200% 200%;
    background-position: 100% 0;
    transition: background-position 0.4s ease-in-out;
  }

  .card.show {
    animation: fadeInUp 0.6s forwards;
  }

  .card.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .card .imgBx {
    position: relative;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    overflow: hidden;
    margin-bottom: 7rem;
  }

  .card .imgBx img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .card .content {
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 160px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    backdrop-filter: blur(15px);
    box-shadow: 0 -10px 10px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 15px;
  }

  .content .contentBx h3 {
    text-transform: uppercase;
    color: #fff;
    letter-spacing: 2px;
    font-weight: 500;
    font-size: 18px;
    text-align: center;
    margin: 20px 0 15px;
    line-height: 1.1em;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const radioButtons = document.querySelectorAll<HTMLInputElement>('input[name="tabs"]');
    const panels = document.querySelectorAll<HTMLDivElement>('.panel');

    function updatePanel(tabName: string) {
      panels.forEach((panel) => {
        if (panel.dataset['tabname'] == tabName) {
          panel.classList.add('show-panel');
          panel.classList.remove('hide-panel');
        } else {
          panel.classList.add('hide-panel');
          panel.classList.remove('show-panel');
        }
      });
    }

    radioButtons.forEach((radio) => {
      radio.addEventListener('change', () => {
        if (radio.checked) {
          updatePanel(radio.value);
        }
      });
    });

    updatePanel('faculty');

    const cards = document.querySelectorAll('.card');

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('show'); // Add 'show' class when the card is in view
          }
        });
      },
      {
        threshold: 0.1, // Trigger when 10% of the card is visible
      }
    );

    cards.forEach((card) => {
      observer.observe(card);
    });
  });
</script>
