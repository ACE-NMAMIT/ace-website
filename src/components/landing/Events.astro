---
const cards = [
  {
    title: 'jsddsg',
    image: '/images/sample.png',
  },
  {
    title: 'jsddsg',
    image: '/images/sample.png',
  },
  {
    title: 'jsddsg',
    image: '/images/sample.png',
  },
  {
    title: 'jsddsg',
    image: '/images/sample.png',
  },
  {
    title: 'jsddsg',
    image: '/images/sample.png',
  },
  {
    title: 'jsddsg',
    image: '/images/sample.png',
  },
  {
    title: 'jsddsg',
    image: '/images/sample.png',
  },
  {
    title: 'jsddsg',
    image: '/images/sample.png',
  },
];
---

<section class="content-container event-section h-fit my-8 overflow-hidden">
  
  <div class="marquee-container overflow-visible w-[100%] relative whitespace-nowrap h-[70vh] flex justify-center text-9xl flex-col gap-0">
    <h1 class="marquee-text-1 inline-block  whitespace-nowrap font-dirtyline font-medium">
      Explore 
    </h1>
     <h1 class="marquee-text-2 inline-block whitespace-nowrap font-dirtyline font-medium absolute top-[56%]">
      More 
    </h1>

  </div>
  <div class="grid grid-cols-1 lg:grid-cols-2 h-fit gap-8 cards-grid">
    {
      cards.map((card) => (
        <div class="event-card interactable" data-type="link">
          <img src={card.image} alt={card.title} />
          {/* <h5>{card.title}</h5> */}
        </div>
      ))
    }
  </div>

  <div class="mx-auto mt-32 w-36 aspect-square bg-white text-black rounded-full grid place-content-center text-center">
    <span> view more </span>
  </div>
</section>

<style>
  .event-section {
    --card-height: 400px;
    margin-bottom: calc(var(--card-height) / 2);
  }

  .cards-column {
    @apply flex flex-col gap-8  w-full h-full;
  }

  .event-card {
    width: 100%;
    height: var(--card-height);
    @apply rounded-[25px] flex flex-col gap-2 bg-gray-700;
  }

  .event-card img {
    @apply w-full h-full object-cover;
    border-radius: inherit;
  }

  @media (min-width: 1024px) {
    .event-card:nth-child(even) {
      margin-top: calc(var(--card-height) / 2);
      margin-bottom: calc(-1 * var(--card-height) / 2);
    }
    .cards-grid {
      padding-bottom: calc(var(--card-height) / 2);
    }
  }

 .marquee-text-1, .marquee-text-2 {
  background: linear-gradient(90deg, #e0eeee 50%, #252525 50%, #e0eeee 50%, #252525 50%);
  background-size: 200% 100%; /* Ensure the background is wide enough to animate */
  color: transparent;
  background-clip: text;
  -webkit-background-clip: text;
  white-space: nowrap;
}
</style>

<script>
 


  document.addEventListener('astro:page-load', () => {
     gsap.registerPlugin(ScrollTrigger);
     const start1X = -250;
  const end1X = -10;

  gsap.fromTo(".marquee-text-1",
    { 
      x: start1X,
      backgroundPosition: "145% 0"  // Start with background far to the right
    },
    {
      x: end1X,
      backgroundPosition: "55% 0",  // Animate background to the left
      ease: "none",
      scrollTrigger: {
        trigger: ".marquee-container",
        start: "top bottom",
        end: "bottom 90%",
        scrub: 1,
      }
    }
  );

  const start2X = 70;
  const end2X = -10;

  gsap.fromTo(".marquee-text-2",
    { 
      x: start2X,
      backgroundPosition: "145% 0"  // Same here, start background off-screen
    },
    {
      x: end2X,
      backgroundPosition: "0% 0",  // Animate it to fill the text
      ease: "none",
      scrollTrigger: {
        trigger: ".marquee-container",
        start: "top bottom",
        end: "bottom 90%",
        scrub: 1,
      }
    }
  );
});

   

    //left cards
    const leftCards = document.querySelectorAll('.event-card:nth-child(odd)');

    window.gsapContext.add(() => {
      Array.from(leftCards).forEach((card) => {
        gsap.fromTo(
          card,
          {
            x: -300,
            opacity: 0,
            rotate: '-45deg',
          },
          {
            x: 0,
            opacity: 1,
            rotate: '0deg',
            ease: 'power4.inOut',
            scrollTrigger: {
              scrub: 0.3,
              trigger: card,
              end: 'center center',
              start: 'top 100%',
              toggleActions: 'restart none none none',
            },
          }
        );
      });
    });

    //right cards
    const rightCards = document.querySelectorAll('.event-card:nth-child(even)');
    window.gsapContext.add(() => {
      
      Array.from(rightCards).forEach((card) => {
        gsap.from(card, {
          x: 300,
          opacity: 0,
          rotate: '45deg',
          ease: 'power4.inOut',
          scrollTrigger: {
            scrub: 0.3,
            trigger: card,
            end: 'center center',
            toggleActions: 'play none none none',
          },
        });
      });
    });
 
</script>
